// <auto-generated />
using System;
using Blog.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.DAL.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20220418122050_fixed-permissions")]
    partial class fixedpermissions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Blog.DAL.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("PermissionActionName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PermissionActionRoute")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("PermissionDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Blog.DAL.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int>("PostAuthorUserId")
                        .HasColumnType("int")
                        .HasColumnName("PostAuthorUserID");

                    b.Property<int?>("PostCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("PostCategoryID");

                    b.Property<DateTime?>("PostDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostFullVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PostIsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("PostShortVersion")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PostId");

                    b.HasIndex(new[] { "PostAuthorUserId" }, "IX_Posts_PostAuthorUserID");

                    b.HasIndex(new[] { "PostCategoryId" }, "IX_Posts_PostCategoryID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Blog.DAL.PostCategory", b =>
                {
                    b.Property<int>("PostCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostCategoryId"), 1L, 1);

                    b.Property<DateTime>("PostCategoryDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostCategoryName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("PostCategoryParentId")
                        .HasColumnType("int")
                        .HasColumnName("PostCategoryParentID");

                    b.HasKey("PostCategoryId");

                    b.HasIndex(new[] { "PostCategoryParentId" }, "IX_PostCategories_PostCategoryParentID");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Blog.DAL.PostComment", b =>
                {
                    b.Property<int>("PostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostCommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostCommentId"), 1L, 1);

                    b.Property<string>("PostComment1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("PostComment");

                    b.Property<bool>("PostCommentIsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("PostCommentPostId")
                        .HasColumnType("int")
                        .HasColumnName("PostCommentPostID");

                    b.Property<DateTime?>("PostDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PostCommentId");

                    b.HasIndex(new[] { "PostCommentPostId" }, "IX_PostComments_PostCommentPostID");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Blog.DAL.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<DateTime>("RoleDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Blog.DAL.RolesPermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RolePermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("RolePermissionId");

                    b.HasIndex(new[] { "PermissionId" }, "IX_RolesPermissions_PermissionID");

                    b.HasIndex(new[] { "RoleId" }, "IX_RolesPermissions_RoleID");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("Blog.DAL.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("UserDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("UserDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserFirstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UserHasConfirmedEmail")
                        .HasColumnType("bit");

                    b.Property<string>("UserLastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserPasswordHashed")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "UserRoleId" }, "IX_Users_UserRoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Blog.DAL.Post", b =>
                {
                    b.HasOne("Blog.DAL.User", "PostAuthorUser")
                        .WithMany("Posts")
                        .HasForeignKey("PostAuthorUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_Users");

                    b.HasOne("Blog.DAL.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .HasConstraintName("FK_Posts_PostCategories");

                    b.Navigation("PostAuthorUser");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("Blog.DAL.PostCategory", b =>
                {
                    b.HasOne("Blog.DAL.PostCategory", "PostCategoryParent")
                        .WithMany("InversePostCategoryParent")
                        .HasForeignKey("PostCategoryParentId")
                        .HasConstraintName("FK_PostCategories_PostCategories");

                    b.Navigation("PostCategoryParent");
                });

            modelBuilder.Entity("Blog.DAL.PostComment", b =>
                {
                    b.HasOne("Blog.DAL.Post", "PostCommentPost")
                        .WithMany("PostComments")
                        .HasForeignKey("PostCommentPostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostComments_Posts");

                    b.Navigation("PostCommentPost");
                });

            modelBuilder.Entity("Blog.DAL.RolesPermission", b =>
                {
                    b.HasOne("Blog.DAL.Permission", "Permission")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolesPermissions_Permissions");

                    b.HasOne("Blog.DAL.Role", "Role")
                        .WithMany("RolesPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolesPermissions_Roles");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Blog.DAL.User", b =>
                {
                    b.HasOne("Blog.DAL.Role", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Blog.DAL.Permission", b =>
                {
                    b.Navigation("RolesPermissions");
                });

            modelBuilder.Entity("Blog.DAL.Post", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("Blog.DAL.PostCategory", b =>
                {
                    b.Navigation("InversePostCategoryParent");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Blog.DAL.Role", b =>
                {
                    b.Navigation("RolesPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Blog.DAL.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
